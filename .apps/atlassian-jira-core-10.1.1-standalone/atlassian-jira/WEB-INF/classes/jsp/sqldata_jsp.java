/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2024-10-09 09:01:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.atlassian.jira.ofbiz.PerformanceSQLInterceptor;
import java.util.Map;
import java.util.List;
import com.atlassian.jira.web.filters.accesslog.AccessLogImprinter;
import com.atlassian.jira.config.properties.JiraSystemProperties;
import com.opensymphony.util.TextUtils;
import com.atlassian.jira.util.lang.Pair;

public final class sqldata_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.atlassian.jira.web.filters.accesslog.AccessLogImprinter");
    _jspx_imports_classes.add("com.opensymphony.util.TextUtils");
    _jspx_imports_classes.add("com.atlassian.jira.ofbiz.PerformanceSQLInterceptor");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.atlassian.jira.config.properties.JiraSystemProperties");
    _jspx_imports_classes.add("com.atlassian.jira.util.lang.Pair");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n\n\n\n\n\n\n<html>\n<head>\n    <style type=\"text/css\">\n        tr.odd, li.odd {background-color:#d3d3d3;}\n    </style>\n</head>\n<body>\n");

    if(session != null && JiraSystemProperties.showPerformanceMonitor())
    {
        final Map<String, PerformanceSQLInterceptor.SQLPerfCache> storage =
                (Map<String, PerformanceSQLInterceptor.SQLPerfCache>) session.getAttribute(AccessLogImprinter.REQUEST_SQL_CACHE_STORAGE);
        final PerformanceSQLInterceptor.SQLPerfCache cache = storage.get(request.getParameter("requestId"));

        if(cache != null)
        {

      out.write("\n<h3>Invocations</h3>\n<table>\n    <thead>\n    <th>SQL</th><th>#</th><th>Avg (ms)</th><th>Total (ms)</th>\n    </thead>\n    ");

            final Map<String,List<Long>> statements = cache.getStatements();
            long overallTotal = 0;
            long overallTotalInvocations = 0;
            int count =0;
            for (Map.Entry<String, List<Long>> entry : statements.entrySet())
            {
                final List<Long> value = entry.getValue();
                long totalTime = 0;
                for (int i = 0; i < value.size(); i++)
                {
                    final Long timing = value.get(i);
                    totalTime += timing;
                }
                overallTotal += totalTime;
                overallTotalInvocations += value.size();
                final long avg = totalTime / value.size();
    
      out.write("\n                <tr ");
if(count %2 == 1) {out.print("class=\"odd\"");}
      out.write("><td>");
      out.print(TextUtils.htmlEncode(entry.getKey()));
      out.write("</td><td>");
      out.print(value.size());
      out.write("</td><td>");
      out.print(avg);
      out.write("</td><td>");
      out.print(totalTime);
      out.write("</td></tr>\n        ");

                    count++;
                }

        
      out.write("\n    <tr><td></td><td><strong>");
      out.print(overallTotalInvocations);
      out.write("</strong></td><td></td><td><strong>");
      out.print(overallTotal);
      out.write("</strong></td></tr>\n</table>\n\n<h3>Statements in Execution Order</h3>\n<ol>\n");

    final List<Pair<String,String>> statementsInCallOrder = cache.getStatementsInCallOrder();
    count = 0;
    for (Pair<String, String> statement : statementsInCallOrder)
    {
        
      out.write("\n        <li ");
if(count %2 == 1) {out.print("class=\"odd\"");}
      out.write(">\n            <a href=\"#\" class=\"stack-trigger\">");
      out.print(TextUtils.htmlEncode(statement.first()));
      out.write("</a>\n            <div class=\"hidden\">");
      out.print(TextUtils.br(TextUtils.htmlEncode(statement.second())));
      out.write("</div>\n        </li>\n    ");

        count++;
    }


      out.write("\n</ol>\n");
 }
} 
      out.write("\n\n<script>\nrequire([\"jquery\"], function ($) {\n    $(function() { // eslint-disable-line @atlassian/onready-checks/no-jquery-onready\n        $(\".stack-trigger\").click(function (e) {\n            e.preventDefault();\n            var $stackDiv = $(this).siblings(\"div\");\n            if($stackDiv.hasClass(\"hidden\")) {\n                $stackDiv.removeClass(\"hidden\");\n            } else {\n                $stackDiv.addClass(\"hidden\");\n            }\n        })\n    });\n});\n</script>\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
