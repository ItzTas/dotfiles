/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2024-10-09 09:01:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package jsp.decorators;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.atlassian.jira.config.properties.LookAndFeelBean;
import com.atlassian.jira.config.properties.ApplicationProperties;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.themes.request.BootstrapToVelocitySafeRequestThemeService;
import com.atlassian.theme.api.request.RequestScopeThemeService;
import com.atlassian.jira.config.FeatureManager;
import static com.atlassian.jira.component.ComponentAccessor.*;
import com.atlassian.jira.plugin.navigation.HeaderFooterRendering;
import com.atlassian.jira.config.properties.LogoProvider;
import com.atlassian.jira.config.properties.DefaultLogoProvider;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.security.xsrf.XsrfTokenGenerator;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.plugin.navigation.HeaderFooterRendering;
import com.atlassian.web.servlet.api.LocationUpdater;
import com.atlassian.jira.web.pagebuilder.CommonWebResourcesProvider;
import com.atlassian.jira.plugin.navigation.LfStylesService;
import com.atlassian.jira.plugin.navigation.HeaderFooterRendering;
import static com.atlassian.jira.component.ComponentAccessor.*;
import com.atlassian.jira.component.ComponentAccessor;
import webwork.util.TextUtil;

public final class general_002dflush_002dearly_002dhead_002dand_002dheader_002dskeleton_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/includes/decorators/aui-layout/app-header-skeleton.jsp", Long.valueOf(1728464177867L));
    _jspx_dependants.put("/includes/decorators/xsrftoken.jsp", Long.valueOf(1728464177867L));
    _jspx_dependants.put("/includes/decorators/aui-layout/head-common-nodecorator-post.jsp", Long.valueOf(1728464177867L));
    _jspx_dependants.put("/includes/decorators/aui-layout/head-common-nodecorator-pre.jsp", Long.valueOf(1728464177867L));
    _jspx_dependants.put("/includes/decorators/theme-switcher-attributes.jsp", Long.valueOf(1728464177867L));
    _jspx_dependants.put("/includes/decorators/aui-layout/head-resources.jsp", Long.valueOf(1728464177867L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("static com.atlassian.jira.component.ComponentAccessor");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.atlassian.web.servlet.api.LocationUpdater");
    _jspx_imports_classes.add("com.atlassian.jira.config.properties.DefaultLogoProvider");
    _jspx_imports_classes.add("com.atlassian.jira.plugin.navigation.LfStylesService");
    _jspx_imports_classes.add("com.atlassian.jira.config.properties.LookAndFeelBean");
    _jspx_imports_classes.add("com.atlassian.jira.plugin.navigation.HeaderFooterRendering");
    _jspx_imports_classes.add("com.atlassian.jira.component.ComponentAccessor");
    _jspx_imports_classes.add("com.atlassian.jira.web.pagebuilder.CommonWebResourcesProvider");
    _jspx_imports_classes.add("com.atlassian.jira.config.properties.LogoProvider");
    _jspx_imports_classes.add("com.atlassian.jira.security.xsrf.XsrfTokenGenerator");
    _jspx_imports_classes.add("com.atlassian.theme.api.request.RequestScopeThemeService");
    _jspx_imports_classes.add("webwork.util.TextUtil");
    _jspx_imports_classes.add("com.atlassian.jira.config.properties.ApplicationProperties");
    _jspx_imports_classes.add("com.atlassian.jira.config.FeatureManager");
    _jspx_imports_classes.add("com.atlassian.jira.themes.request.BootstrapToVelocitySafeRequestThemeService");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n\n\n\n");
      out.write("\n<!DOCTYPE html>\n<html lang=\"");
      out.print( ComponentAccessor.getJiraAuthenticationContext().getI18nHelper().getLocale().getLanguage() );
      out.write('"');
      out.write(' ');
      out.write("\n\n\n\n\n");

    final FeatureManager featureManager = ComponentAccessor.getComponent(FeatureManager.class);
    String htmlAttributes = "";
    if (featureManager.isEnabled("com.atlassian.jira.theme.switcher")) {
        final RequestScopeThemeService requestScopeThemeService = ComponentAccessor.getComponentOfType(BootstrapToVelocitySafeRequestThemeService.class).getRequestThemeService();
        htmlAttributes = requestScopeThemeService.getHtmlAttributesForThisRequest(request);
    }

      out.write('\n');
      out.print( htmlAttributes );
      out.write(">\n<head>\n    ");
      out.write("\n\n\n\n\n\n\n\n");

    HeaderFooterRendering headerFooterRendering = getComponent(HeaderFooterRendering.class);
    LogoProvider logoProvider = getComponent(DefaultLogoProvider.class);

      out.write("\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"/>\n");


    // include version meta information
    headerFooterRendering.includeVersionMetaTags(out);

    // writes the <meta> tags into the page head
    headerFooterRendering.requireCommonMetadata();
    headerFooterRendering.includeMetadata(out);

    // include web panels
    headerFooterRendering.includeWebPanels(out, "atl.header");

      out.write('\n');
      out.write('\n');
      out.write('\n');

    XsrfTokenGenerator xsrfTokenGenerator = ComponentAccessor.getComponent(XsrfTokenGenerator.class);

      out.write("    \n<meta id=\"atlassian-token\" name=\"atlassian-token\" content=\"");
      out.print(xsrfTokenGenerator.generateToken(request));
      out.write("\">\n\n");
      out.write("\n\n<link rel=\"shortcut icon\" href=\"");
      out.print( headerFooterRendering.getRelativeResourcePrefix());
      out.print(logoProvider.getFavicon());
      out.write("\">\n\n");
      out.write("\n    ");
      out.write("\n\n\n\n\n");
      out.print(ComponentAccessor.getComponent(LfStylesService.class).prepareLookAndFeelColorsCss());
      out.write("\n\n<script>window.contextPath = '");
      out.print(request.getContextPath());
      out.write("';</script>\n");

    final LocationUpdater locationUpdater = ComponentAccessor.getOSGiComponentInstanceOfType(LocationUpdater.class);
    locationUpdater.updateLocation(out);

    CommonWebResourcesProvider commonWebResourcesProvider = ComponentAccessor.getComponent(CommonWebResourcesProvider.class);
    commonWebResourcesProvider.requireCommonWebResources();
    commonWebResourcesProvider.drainIncludedWebResources(out);

    HeaderFooterRendering headerAndFooter = ComponentAccessor.getComponent(HeaderFooterRendering.class);
    headerAndFooter.includeWebPanels(out, "atl.header.after.scripts");

      out.write('\n');
      out.write("\n    ");
      out.write("\n\n\n\n\n\n\n\n");

    //TODO: this is already defined elsewhere - hence the "1". Find a way to make it less shitty. Maybe some new tags?
    HeaderFooterRendering headerFooterRendering1 = getComponent(HeaderFooterRendering.class);

    // There's no reason to delay an early brow flush, so we leave this for the chin flush (micro optimisation).
    headerFooterRendering1.includeGoogleSiteVerification(out);

    // Extra metadata and resources might have been required since the head-pre was written, so we need to drain
    // and write them out.
    headerFooterRendering1.includeMetadata(out);

    final String loadingText = ComponentAccessor.getJiraAuthenticationContext().getI18nHelper().getText("common.concepts.loading");

      out.write("\n\n<title>");
      out.print( loadingText );
      out.write("</title>\n<link id=\"open-search-description-link\" rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"");
      out.print( request.getContextPath());
      out.write("/osd.jsp\" title=\"");
      out.print( TextUtil.escapeHTML(loadingText) );
      out.write("\"/>\n\n");
      out.write("\n</head>\n<body id=\"jira\" class=\"aui-layout aui-theme-default\">\n<div id=\"page\">\n        ");
 final LookAndFeelBean lookAndFeelBean = LookAndFeelBean.getInstance(ComponentAccessor.getApplicationProperties()); 
      out.write("\n    <div id=\"header-skeleton\" class=\"aui-header\" style=\"--aui-appheader-bg-color: ");
      out.print( lookAndFeelBean.getTopBackgroundColour() );
      out.write("; position: absolute; width: 100%; padding: 0\">\n        <span elementtiming=\"app-header-skeleton\"> </span>\n        <script>\n            performance.mark(\"app-header-skeleton\");\n        </script>\n        ");
      out.write("<svg id=\"jira_app_header_skeleton\" class=\"aui-header-primary\" width=\"100%\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\">\n    <style>\n        #mask {\n            animation: mask 0.8s forwards linear infinite;\n        }\n\n        @keyframes mask {\n            from {\n                transform: translateX(0)\n            }\n            to {\n                transform: translateX(100%)\n            }\n        }\n    </style>\n</svg>\n<script>\n    const jiraAppHeaderSkeletonSvg = document.querySelector('#jira_app_header_skeleton');\n    jiraAppHeaderSkeletonSvg.setAttribute('width', __jiraAppHeaderSkeleton.headerWidth);\n    jiraAppHeaderSkeletonSvg.innerHTML += __jiraAppHeaderSkeleton.headerSvg;\n</script>\n");
      out.write("\n    </div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
