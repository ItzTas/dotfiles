[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format.
	s = status -s

	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules.
	p = pull --recurse-submodules

	# Clone a repository including all submodules.
	c = clone --recursive

	# Commit all changes.
	ca = !git add ':(exclude,attr:builtin_objectmode=160000)' && git commit -av

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

    # Others
	graph = log --oneline --graph --all --decorate --stat --color --pretty=format:'%h %d %s %an %ar'

[diff]
	renameLimit = 99999

[core]
    filemode = true
    editor = nvim
    whitespace = error
    preloadindex = true
    untrackedCache = true
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[pager]
    diff = diff-so-fancy | $PAGER
    branch = false
    tag = false

[advice]
    addEmptyPathspec = false
    statusHints = false

[rerere]
    enabled = true

[help]
    autocorrect = 1

[diff "bin"]
    textconv = hexdump -v -C

[merge]
    tool = nvimdiff
    log = true

[mergetool "nvimdiff"]
    cmd = nvim -d "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
    keepBackup = false

[commit]
    verbose = true
    ; gpgSign = true

[merge]
    conflictstyle = diff3 ; may conflict with diff tools in some projects

[status]
    branch = true
    showStash = true
    showUntrackedFiles = all

[diff] 
    context = 3
    renames = copies
    interHunkContext = 10
    algorithm = histogram

[interactive]
    diffFilter = diff-so-fancy --patch
    singlekey = true

[push]
    autoSetupRemote = true
    default = current
    followTags = true

[pull]
    default = current
    rebase = true

[apply]
    whitespace = fix

[fetch]
    prune = true
    fsckObjects = true

[transfer]
    fsckObjects = true

[receive]
    fsckObjects = true

[rebase]
    missingCommitsCheck = warn
    autosquash = true ; automatically reorder and squash fixup! or squash! commits during interactive rebase

[log]
    graphColors = blue,yellow,cyan,magenta,green,red
    follow = true

[branch]
    sort = -committerdate

[tag]
    sort = -taggerdate

[color]
    ui = auto
    diff = auto
    status = auto
    branch = auto
    showBranch = auto
    interactive = auto
    grep = auto

[color "decorate"]
    HEAD = 15 bold
    branch = 13
    tag = 10
    remoteBranch = 9

[color "diff"]
    meta = 15 bold
    frag = 13
    context = 15
    whitespace = 11 reverse
    old = 9
    new = 10

[color "status"]
    header = 15 bold
    branch = 13
    nobranch = 9
    unmerged = 9
    untracked = 11
    added = 10
    changed = 13 bold

[color "branch"]
    current = 15 reverse
    local = 13
    remote = 9

[diff-so-fancy]
    markEmptyLines = false
    stripLeadingSymbols = true
